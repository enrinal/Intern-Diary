// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "gitlab.warungpintar.co/enrinal/intern-diary/simple-order/models"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: item, qty
func (_m *Usecase) AddItem(item string, qty int64) error {
	ret := _m.Called(item, qty)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(item, qty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustCart provides a mock function with given fields: custid
func (_m *Usecase) GetCustCart(custid int64) ([]*models.Cart, error) {
	ret := _m.Called(custid)

	var r0 []*models.Cart
	if rf, ok := ret.Get(0).(func(int64) []*models.Cart); ok {
		r0 = rf(custid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(custid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItem provides a mock function with given fields: item
func (_m *Usecase) RemoveItem(item string) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
